"""
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π
–ê–≤—Ç–æ—Ä: Lebedev Nikolay
"""

import sys
import os
import gc
import re
import time
import json
import subprocess
import tempfile
import warnings
import threading
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, Any

from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget,
    QLabel, QTextEdit, QPushButton, QLineEdit,
    QFileDialog, QVBoxLayout, QHBoxLayout, QGroupBox,
    QMessageBox, QStyleFactory, QProgressBar, QComboBox,
    QCheckBox, QSpinBox, QTabWidget, QTextBrowser,
    QSplitter, QFrame, QStyle, QDialog
)
from PySide6.QtCore import Qt, QThread, Signal, Slot, QTimer, QPropertyAnimation, QEasingCurve, QMutex, QMutexLocker
from PySide6.QtGui import QIcon, QFont, QPalette, QColor, QTextCharFormat, QTextCursor, QPixmap

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore")
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
APP_NAME = "Audio/Video Transcription Pro"
APP_VERSION = "5.3-PROFESSIONAL"
AUTHOR = "Lebedev Nikolay"
DEFAULT_HF_TOKEN = "" #–î–û–ë–ê–í–¨–¢–ï –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù HF

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏
MEMORY_MUTEX = QMutex()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
FASTER_WHISPER_AVAILABLE = False
DOCX_AVAILABLE = False
TORCH_AVAILABLE = False
DEVICE = "cpu"

try:
    from faster_whisper import WhisperModel
    FASTER_WHISPER_AVAILABLE = True
except ImportError:
    FASTER_WHISPER_AVAILABLE = False
    print("–û–®–ò–ë–ö–ê: faster_whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

try:
    from docx import Document
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPU
try:
    import torch
    TORCH_AVAILABLE = True
    DEVICE = "cuda" if torch.cuda.is_available() else "cpu"
    if sys.platform == "win32":
        os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
    print(f"PyTorch: {torch.__version__}, Device: {DEVICE}")
except ImportError:
    TORCH_AVAILABLE = False
    DEVICE = "cpu"
    print("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - CPU —Ä–µ–∂–∏–º")


class CrashSafeMemoryManager:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—Ä–∞—à–µ–π"""

    _cleanup_in_progress = False
    _cleanup_lock = threading.Lock()

    @staticmethod
    def safe_gpu_cleanup(stage="unknown"):
        """–£–ª—å—Ç—Ä–∞-–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏"""
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
        with CrashSafeMemoryManager._cleanup_lock:
            if CrashSafeMemoryManager._cleanup_in_progress:
                return

            CrashSafeMemoryManager._cleanup_in_progress = True

        try:
            # –ú—è–≥–∫–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ Python
            try:
                gc.collect()
            except:
                pass

            # –û—á–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å CUDA
            if DEVICE == "cuda" and TORCH_AVAILABLE:
                try:
                    import torch

                    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    if not torch.cuda.is_available():
                        return

                    if torch.cuda.device_count() == 0:
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    try:
                        current_device = torch.cuda.current_device()
                    except:
                        return

                    # –¢–æ–ª—å–∫–æ –º—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞, –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    try:
                        allocated_before = torch.cuda.memory_allocated(current_device) / (1024**2)
                        torch.cuda.empty_cache()
                        allocated_after = torch.cuda.memory_allocated(current_device) / (1024**2)

                        freed = allocated_before - allocated_after
                        if freed > 1:
                            print(f"GPU cleanup {stage}: freed {freed:.1f}MB")

                    except Exception as cache_error:
                        print(f"Cache cleanup warning: {cache_error}")

                except Exception as cuda_error:
                    print(f"CUDA cleanup warning: {cuda_error}")

        except Exception as e:
            print(f"Memory cleanup error: {e}")
        finally:
            CrashSafeMemoryManager._cleanup_in_progress = False

    @staticmethod
    def reset_for_new_transcription():
        """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            for _ in range(3):
                gc.collect()

            # –û—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏
            CrashSafeMemoryManager.safe_gpu_cleanup("reset for new transcription")

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(0.1)

        except Exception as e:
            print(f"Reset error: {e}")


class AboutDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        self.setFixedSize(450, 350)
        self.setModal(True)

        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel(APP_NAME)
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #58a6ff;
                margin: 10px;
            }
        """)

        # –í–µ—Ä—Å–∏—è
        version = QLabel(f"–í–µ—Ä—Å–∏—è {APP_VERSION}")
        version.setAlignment(Qt.AlignmentFlag.AlignCenter)
        version.setStyleSheet("font-size: 14px; color: #8b949e; margin: 5px;")

        # –ê–≤—Ç–æ—Ä
        author = QLabel(f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {AUTHOR}")
        author.setAlignment(Qt.AlignmentFlag.AlignCenter)
        author.setStyleSheet("font-size: 12px; color: #d4d4d4; margin: 5px;")

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLabel(
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏\n"
            "–∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π\n"
            "—Å–ø–∏–∫–µ—Ä–æ–≤ –Ω–∞ –±–∞–∑–µ Whisper AI\n\n"
            "–ù–∞–¥–µ–∂–Ω–æ, –±—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ."
        )
        description.setAlignment(Qt.AlignmentFlag.AlignCenter)
        description.setWordWrap(True)
        description.setStyleSheet("font-size: 11px; color: #8b949e; margin: 15px;")

        # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        tech = QLabel("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: OpenAI Whisper, PyAnnote, PySide6, PyTorch")
        tech.setAlignment(Qt.AlignmentFlag.AlignCenter)
        tech.setStyleSheet("font-size: 10px; color: #6b7280; margin: 10px;")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        close_btn.setStyleSheet("""
            QPushButton {
                background: #667eea;
                color: white;
                border: none;
                padding: 8px 20px;
                border-radius: 15px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #5a67d8;
            }
        """)

        layout.addWidget(title)
        layout.addWidget(version)
        layout.addWidget(author)
        layout.addWidget(description)
        layout.addWidget(tech)
        layout.addStretch()

        btn_layout = QHBoxLayout()
        btn_layout.addStretch()
        btn_layout.addWidget(close_btn)
        btn_layout.addStretch()
        layout.addLayout(btn_layout)


class LogWidget(QTextBrowser):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –ª–æ–≥–æ–≤ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"""

    def __init__(self):
        super().__init__()
        self.setReadOnly(True)
        self.setOpenExternalLinks(False)
        self.setStyleSheet("""
            QTextBrowser {
                background-color: #1e1e1e;
                color: #d4d4d4;
                border: 1px solid #3c3c3c;
                border-radius: 6px;
                padding: 8px;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 11px;
            }
            QScrollBar:vertical {
                background: #2d2d2d;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #5a5a5a;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #7a7a7a;
            }
        """)

    def log(self, message, level="INFO"):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")

        colors = {
            "INFO": "#58a6ff",
            "SUCCESS": "#56d364",
            "WARNING": "#f0883e",
            "ERROR": "#f85149",
            "DEBUG": "#8b949e"
        }

        icons = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "DEBUG": "üîç"
        }

        color = colors.get(level, "#d4d4d4")
        icon = icons.get(level, "‚Ä¢")

        html = f'<span style="color: #8b949e">[{timestamp}]</span> '
        html += f'<span style="color: {color}">{icon} <b>{level}</b>:</span> '
        html += f'<span style="color: #d4d4d4">{message}</span>'

        self.append(html)

        # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        cursor = self.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.setTextCursor(cursor)


class ModelDownloader(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""

    progress_signal = Signal(int, str)
    finished_signal = Signal(bool, str)
    log_signal = Signal(str, str)

    def __init__(self, model_name: str):
        super().__init__()
        self.model_name = model_name
        self.should_stop = False

    def run(self):
        try:
            self.log_signal.emit(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {self.model_name}...", "INFO")
            self.progress_signal.emit(10, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...")

            if self.should_stop:
                return

            self.progress_signal.emit(30, "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            compute_type = "float16" if DEVICE == "cuda" else "int8"

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            CrashSafeMemoryManager.safe_gpu_cleanup("before model download")

            model = WhisperModel(
                self.model_name,
                device=DEVICE,
                compute_type=compute_type,
                cpu_threads=min(4, os.cpu_count()),
                num_workers=1,
                download_root=self.get_models_cache_dir()
            )

            self.progress_signal.emit(80, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            del model
            CrashSafeMemoryManager.safe_gpu_cleanup("after model download")

            self.progress_signal.emit(100, "–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!")
            self.finished_signal.emit(True, "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}", "ERROR")
            CrashSafeMemoryManager.safe_gpu_cleanup("after model download error")
            self.finished_signal.emit(False, str(e))

    def stop(self):
        self.should_stop = True
        self.quit()
        self.wait()

    @staticmethod
    def get_models_cache_dir() -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∞ –º–æ–¥–µ–ª–µ–π"""
        if sys.platform == "win32":
            cache_dir = Path.home() / "AppData" / "Local" / "WhisperModels"
        else:
            cache_dir = Path.home() / ".cache" / "whisper"
        cache_dir.mkdir(parents=True, exist_ok=True)
        return cache_dir


class ProfessionalTranscriptionWorker(QThread):
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π"""

    progress_signal = Signal(int, str)
    log_signal = Signal(str, str)
    finished_signal = Signal(str)
    segment_signal = Signal(str)
    stats_signal = Signal(dict)

    def __init__(self, file_path, settings):
        super().__init__()
        self.file_path = file_path
        self.settings = settings
        self.temp_dir = None
        self._is_running = True
        self.start_time = None

    def run(self):
        """–ü—Ä–æ—Ü–µ—Å—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π"""
        model = None
        try:
            self.start_time = time.time()
            self.log_signal.emit("–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", "INFO")

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            self.temp_dir = tempfile.TemporaryDirectory()
            output_audio = os.path.join(self.temp_dir.name, "audio.wav")

            # –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
            self.progress_signal.emit(10, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")
            self.log_signal.emit("–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ", "INFO")

            if not self._is_running:
                return

            self.extract_audio(output_audio)

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–∏
            CrashSafeMemoryManager.safe_gpu_cleanup("before model loading")

            # –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
            self.progress_signal.emit(20, "–ó–∞–≥—Ä—É–∑–∫–∞ Whisper –º–æ–¥–µ–ª–∏...")
            self.log_signal.emit(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {self.settings['model_size']} –Ω–∞ {DEVICE}", "INFO")

            if not self._is_running:
                return

            model = self.load_model_safely()

            if not self._is_running:
                if model:
                    del model
                    model = None
                    CrashSafeMemoryManager.safe_gpu_cleanup("after early stop")
                return

            # –≠—Ç–∞–ø 3: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            self.progress_signal.emit(30, "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
            self.log_signal.emit("–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é", "INFO")

            if not self._is_running:
                if model:
                    del model
                    model = None
                    CrashSafeMemoryManager.safe_gpu_cleanup("after early stop")
                return

            segments = self.transcribe_audio_safely(output_audio, model)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–æ–¥–µ–ª—å
            if model:
                try:
                    del model
                    model = None
                    self.log_signal.emit("–ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞", "DEBUG")
                except Exception as model_cleanup_error:
                    self.log_signal.emit(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {model_cleanup_error}", "WARNING")

            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            CrashSafeMemoryManager.safe_gpu_cleanup("after transcription")

            if not self._is_running:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            if not segments:
                self.log_signal.emit("–°–µ–≥–º–µ–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ –∞—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º —Ç–∏—Ö–æ–µ", "WARNING")
                self.finished_signal.emit("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏.")
                return

            # –≠—Ç–∞–ø 4: –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è
            formatted_text = ""
            if self.settings.get('use_diarization'):
                self.progress_signal.emit(70, "–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —Å–ø–∏–∫–µ—Ä–æ–≤...")

                if not self._is_running:
                    return

                formatted_text = self.apply_crash_safe_diarization(segments)
            else:
                formatted_text = self.format_simple_text_safely(segments)

            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
            CrashSafeMemoryManager.safe_gpu_cleanup("after diarization")

            if not formatted_text or formatted_text.strip() == "":
                formatted_text = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª."
                self.log_signal.emit("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", "WARNING")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            try:
                self.send_statistics(segments, formatted_text)
            except Exception as stats_error:
                self.log_signal.emit(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_error}", "WARNING")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            CrashSafeMemoryManager.safe_gpu_cleanup("final cleanup")

            self.progress_signal.emit(100, "–ì–æ—Ç–æ–≤–æ!")
            self.log_signal.emit("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            self.finished_signal.emit(formatted_text)

        except Exception as e:
            import traceback
            error_msg = f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}"
            error_trace = traceback.format_exc()

            self.log_signal.emit(error_msg, "ERROR")
            self.log_signal.emit(f"–î–µ—Ç–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {error_trace}", "DEBUG")

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∞—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.log_signal.emit("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...", "WARNING")
                if model:
                    del model
                    model = None

                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                CrashSafeMemoryManager.safe_gpu_cleanup("emergency cleanup")

                self.log_signal.emit("–ó–∞—â–∏—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "INFO")

            except Exception as cleanup_critical_error:
                self.log_signal.emit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã: {cleanup_critical_error}", "ERROR")

            self.finished_signal.emit(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}")
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            try:
                if model:
                    del model
                    model = None
            except:
                pass

            self.cleanup()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        self._is_running = False
        self.log_signal.emit("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...", "WARNING")

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        try:
            if self.isRunning():
                self.quit()
                if not self.wait(3000):  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                    self.log_signal.emit("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...", "WARNING")
                    self.terminate()
                    self.wait(1000)  # –ï—â–µ —Å–µ–∫—É–Ω–¥–∞
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}", "ERROR")

    def extract_audio(self, output_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –∑–∞—â–∏—Ç–æ–π"""
        ffmpeg_exe = self.find_ffmpeg()
        if not ffmpeg_exe:
            raise RuntimeError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ ffmpeg.exe –≤ –ø–∞–ø–∫—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")

        cmd = [
            ffmpeg_exe, "-y",
            "-i", self.file_path,
            "-vn", "-acodec", "pcm_s16le",
            "-ar", "16000", "-ac", "1",
            "-af", "highpass=f=200,lowpass=f=3000",
            output_path
        ]

        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        if result.returncode != 0:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ FFmpeg: {result.stderr}")

        size_mb = os.path.getsize(output_path) / (1024 * 1024)
        self.log_signal.emit(f"–ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {size_mb:.1f} –ú–ë", "SUCCESS")

    def find_ffmpeg(self):
        """–ü–æ–∏—Å–∫ FFmpeg"""
        if getattr(sys, 'frozen', False):
            app_dir = Path(sys.executable).parent
        else:
            app_dir = Path(__file__).parent

        local_ffmpeg = app_dir / "ffmpeg.exe"
        if local_ffmpeg.exists():
            return str(local_ffmpeg)

        try:
            result = subprocess.run(['ffmpeg', '-version'], capture_output=True)
            if result.returncode == 0:
                return 'ffmpeg'
        except:
            pass

        return None

    def load_model_safely(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        try:
            compute_type = "float16" if DEVICE == "cuda" else "int8"

            # –î–ª—è –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —Å–ª–∞–±—ã—Ö GPU
            if DEVICE == "cuda" and self.settings['model_size'] in ['large', 'large-v2', 'large-v3']:
                try:
                    import torch
                    vram = torch.cuda.get_device_properties(0).total_memory / (1024 ** 3)
                    if vram < 10:
                        compute_type = "int8"
                        self.log_signal.emit(f"GPU –ø–∞–º—è—Ç—å: {vram:.1f}GB. –ò—Å–ø–æ–ª—å–∑—É–µ–º int8", "WARNING")
                except:
                    pass

            self.log_signal.emit(f"–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å {compute_type}", "INFO")

            model = WhisperModel(
                self.settings['model_size'],
                device=DEVICE,
                compute_type=compute_type,
                cpu_threads=min(4, os.cpu_count()),
                num_workers=1,
                download_root=ModelDownloader.get_models_cache_dir()
            )

            self.log_signal.emit(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (compute_type: {compute_type})", "SUCCESS")
            return model

        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}", "ERROR")
            try:
                self.log_signal.emit("–ü—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å...", "WARNING")
                model = WhisperModel(
                    "base",
                    device="cpu",
                    compute_type="int8",
                    cpu_threads=2,
                    num_workers=1,
                    download_root=ModelDownloader.get_models_cache_dir()
                )
                self.log_signal.emit("–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ", "WARNING")
                return model
            except Exception as fallback_e:
                self.log_signal.emit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {fallback_e}", "ERROR")
                raise fallback_e

    def transcribe_audio_safely(self, audio_path, model):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"""
        try:
            segments, info = model.transcribe(
                audio_path,
                language=self.settings['language'] if self.settings['language'] != 'auto' else None,
                task="transcribe",
                beam_size=5,
                best_of=5,
                patience=1,
                temperature=0.0,
                initial_prompt="–≠—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ." if self.settings['language'] == 'ru' else None,
                word_timestamps=True,
                vad_filter=True,
                vad_parameters=dict(
                    threshold=0.5,
                    min_speech_duration_ms=250,
                    max_speech_duration_s=float('inf'),
                    min_silence_duration_ms=self.settings.get('min_silence', 1000),
                    speech_pad_ms=400
                ),
                condition_on_previous_text=False,
                compression_ratio_threshold=2.4,
                log_prob_threshold=-1.0,
                no_speech_threshold=0.6
            )

            # –Ø–∑—ã–∫
            if hasattr(info, 'language'):
                self.log_signal.emit(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {info.language} ({info.language_probability:.0%})", "INFO")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            segments_list = []
            total_segments = 0

            for segment in segments:
                if not self._is_running:
                    break

                try:
                    text = self.clean_text_safely(segment.text.strip())
                    if text and len(text) > 2:
                        segments_list.append({
                            'start': float(segment.start),
                            'end': float(segment.end),
                            'text': text
                        })

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        self.segment_signal.emit(f"[{self.format_time(segment.start)}] {text}")

                        total_segments += 1
                        if total_segments % 10 == 0:
                            progress = min(30 + int(40 * segment.end / (info.duration or 100)), 70)
                            self.progress_signal.emit(progress, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_segments}")

                            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                            if total_segments % 50 == 0:
                                CrashSafeMemoryManager.safe_gpu_cleanup("during transcription")

                except Exception as seg_error:
                    self.log_signal.emit(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç: {seg_error}", "DEBUG")
                    continue

            self.log_signal.emit(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments_list)}", "SUCCESS")
            return segments_list

        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}", "ERROR")
            raise e

    def clean_text_safely(self, text):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return text

        try:
            # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])\1{3,}', r'\1\1', text)
            text = re.sub(r'(\b\w{1,3}\b)[\s-]*(?:\1[\s-]*){3,}', r'\1', text)

            # –£–¥–∞–ª—è–µ–º –º—É—Å–æ—Ä–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            text = re.sub(r'[^\w\s\.\,\!\?\-\:\;\"\']+', ' ', text)
            text = re.sub(r'\s+', ' ', text)

            return text.strip()
        except Exception:
            return str(text)[:500]  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback

    def apply_crash_safe_diarization(self, segments):
        """–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫—Ä–∞—à–µ–π"""
        try:
            self.log_signal.emit("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏...", "INFO")

            if not segments or len(segments) == 0:
                self.log_signal.emit("–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏", "WARNING")
                return "–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ä–µ—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            CrashSafeMemoryManager.safe_gpu_cleanup("before diarization")

            min_pause = float(self.settings.get('min_pause', 2.0))
            diarized_segments = []
            current_speaker = 1
            last_end = 0.0

            self.log_signal.emit(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –ø–∞—É–∑–æ–π {min_pause}—Å", "INFO")

            for i, seg in enumerate(segments):
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    if i % 25 == 0 and not self._is_running:
                        self.log_signal.emit("–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞", "WARNING")
                        break

                    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞
                    if not self.validate_segment_safely(seg, i):
                        continue

                    start_time = float(seg['start'])
                    end_time = float(seg['end'])
                    text = str(seg['text']).strip()[:500]

                    if not text or len(text) < 2:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É –¥–ª—è —Å–º–µ–Ω—ã —Å–ø–∏–∫–µ—Ä–∞
                    if last_end > 0 and start_time - last_end > min_pause:
                        current_speaker = 2 if current_speaker == 1 else 1
                        self.log_signal.emit(f"–°–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞ –Ω–∞ {current_speaker}", "DEBUG")

                    diarized_segments.append({
                        'speaker': f"–°–ø–∏–∫–µ—Ä {current_speaker}",
                        'text': text,
                        'start': start_time,
                        'end': end_time
                    })

                    last_end = end_time

                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                    if i % 50 == 0 and i > 0:
                        CrashSafeMemoryManager.safe_gpu_cleanup("during diarization")

                except Exception as seg_error:
                    self.log_signal.emit(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç {i}: {seg_error}", "DEBUG")
                    continue

            # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
            CrashSafeMemoryManager.safe_gpu_cleanup("after diarization processing")

            if not diarized_segments:
                self.log_signal.emit("–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å–æ–∑–¥–∞–ª–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤", "WARNING")
                return self.format_simple_text_safely(segments)

            unique_speakers = len(set(seg['speaker'] for seg in diarized_segments))
            self.log_signal.emit(f"–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(diarized_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, {unique_speakers} —Å–ø–∏–∫–µ—Ä–æ–≤", "SUCCESS")

            return self.format_diarized_text_safely(diarized_segments)

        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            CrashSafeMemoryManager.safe_gpu_cleanup("after diarization error")
            return self.format_simple_text_safely(segments)

    def validate_segment_safely(self, seg, index):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞"""
        try:
            if not seg or not isinstance(seg, dict):
                return False

            required_keys = ['start', 'end', 'text']
            if not all(key in seg for key in required_keys):
                return False

            start_time = float(seg['start'])
            end_time = float(seg['end'])

            if start_time < 0 or end_time < start_time or end_time - start_time > 600:
                return False

            text = str(seg['text']).strip()
            if not text or len(text) < 1:
                return False

            return True

        except Exception:
            return False

    def format_simple_text_safely(self, segments):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if not segments or len(segments) == 0:
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."

            texts = []
            for i, seg in enumerate(segments):
                try:
                    if not self.validate_segment_safely(seg, i):
                        continue

                    text = str(seg['text']).strip()
                    if text and len(text) > 1:
                        texts.append(text)

                    if i % 100 == 0 and not self._is_running:
                        break

                except Exception:
                    continue

            if not texts:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤."

            result = " ".join(texts)
            result = result.replace("  ", " ").strip()

            if len(result) > 100000:
                result = result[:100000] + "\n\n[–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏]"

            return result if result else "–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."

        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", "ERROR")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."

    def format_diarized_text_safely(self, segments):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if not segments or len(segments) == 0:
                return "–ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."

            formatted_parts = []
            current_speaker = None
            current_texts = []

            for i, seg in enumerate(segments):
                try:
                    if not seg or not isinstance(seg, dict):
                        continue

                    speaker = str(seg.get('speaker', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')).strip()[:50]
                    text = str(seg.get('text', '')).strip()[:1000]

                    if not speaker or not text:
                        continue

                    if speaker != current_speaker:
                        if current_texts and current_speaker:
                            speaker_line = f"{current_speaker}: {' '.join(current_texts)}"
                            formatted_parts.append(speaker_line[:3000])

                        current_speaker = speaker
                        current_texts = [text]
                    else:
                        current_texts.append(text)

                        if len(current_texts) > 100:
                            current_texts = current_texts[-100:]

                except Exception:
                    continue

            if current_texts and current_speaker:
                speaker_line = f"{current_speaker}: {' '.join(current_texts)}"
                formatted_parts.append(speaker_line[:3000])

            if not formatted_parts:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."

            result = "\n\n".join(formatted_parts)

            if len(result) > 200000:
                result = result[:200000] + "\n\n[–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏]"

            return result if result.strip() else "–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏."

        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}", "ERROR")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."

    def format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        return f"{int(seconds // 60):02d}:{int(seconds % 60):02d}"

    def send_statistics(self, segments, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            elapsed = time.time() - self.start_time
            stats = {
                'duration': elapsed,
                'segments': len(segments),
                'words': len(text.split()),
                'chars': len(text),
                'speed': len(segments) / elapsed if elapsed > 0 else 0
            }
            self.stats_signal.emit(stats)
        except Exception as e:
            self.log_signal.emit(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", "WARNING")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.temp_dir:
                self.temp_dir.cleanup()
                self.log_signal.emit("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã", "DEBUG")
        except Exception as e:
            self.log_signal.emit(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}", "WARNING")

        # –û—á–µ–Ω—å –º—è–≥–∫–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        try:
            gc.collect()
        except:
            pass


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()
        self.setWindowTitle(f"{APP_NAME} v{APP_VERSION}")
        self.setGeometry(100, 100, 1200, 800)
        self.setMinimumSize(1000, 700)

        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.setStyleSheet(self.get_dark_theme())

        if not FASTER_WHISPER_AVAILABLE:
            QMessageBox.critical(
                self, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                "faster_whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install faster-whisper"
            )
            sys.exit(1)

        self.init_ui()
        self.video_file_path = None
        self.transcription_thread = None
        self.transcribed_text = ""
        self.model_downloader = None

    def init_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_container = QWidget()
        header_layout = QVBoxLayout(header_container)
        header_layout.setSpacing(0)
        header_layout.setContentsMargins(0,0,0,0)

        title_label = QLabel("–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #ffffff;
                padding-top: 10px;
                padding-bottom: 5px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                border-top-left-radius: 10px;
                border-top-right-radius: 10px;
            }
        """)

        author_label = QLabel(f"by {AUTHOR}")
        author_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        author_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                font-style: italic;
                color: #e2e8f0;
                padding-bottom: 10px;
                padding-top: 0px;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                border-bottom-left-radius: 10px;
                border-bottom-right-radius: 10px;
            }
        """)

        header_layout.addWidget(title_label)
        header_layout.addWidget(author_label)
        main_layout.addWidget(header_container)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–∞–±–∞—Ö
        tabs = QTabWidget()
        tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #3c3c3c;
                background: #2d2d2d;
                border-radius: 8px;
            }
            QTabBar::tab {
                background: #3c3c3c;
                color: #d4d4d4;
                padding: 10px 20px;
                margin-right: 2px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
            }
            QTabBar::tab:selected {
                background: #667eea;
                color: white;
            }
            QTabBar::tab:hover {
                background: #4c5cda;
            }
        """)

        # –í–∫–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        transcription_tab = self.create_transcription_tab()
        tabs.addTab(transcription_tab, "üéôÔ∏è –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø")

        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_tab = self.create_settings_tab()
        tabs.addTab(settings_tab, "‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò")

        # –í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤
        logs_tab = self.create_logs_tab()
        tabs.addTab(logs_tab, "üìä –õ–û–ì–ò")

        main_layout.addWidget(tabs)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.create_status_bar()

    def create_transcription_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_group = QGroupBox("üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞")
        file_layout = QHBoxLayout()

        self.select_file_btn = QPushButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª")
        self.select_file_btn.setIcon(self.style().standardIcon(QStyle.StandardPixmap.SP_DirOpenIcon))
        self.select_file_btn.setStyleSheet("""
            QPushButton {
                padding: 8px 16px;
                font-size: 14px;
                font-weight: bold;
            }
        """)

        self.file_label = QLabel("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.file_label.setStyleSheet("color: #8b949e; font-style: italic;")

        file_layout.addWidget(self.select_file_btn)
        file_layout.addWidget(self.file_label, 1)
        file_group.setLayout(file_layout)

        # –ö–æ–Ω—Ç—Ä–æ–ª—ã
        control_layout = QHBoxLayout()

        self.transcribe_btn = QPushButton("–ù–ê–ß–ê–¢–¨ –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Æ")
        self.transcribe_btn.setEnabled(False)
        self.transcribe_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                color: white;
                border: none;
                padding: 12px 30px;
                font-size: 16px;
                font-weight: bold;
                border-radius: 25px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #5a67d8, stop:1 #6b46c1);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #4c51bf, stop:1 #553c9a);
            }
            QPushButton:disabled {
                background: #4a5568;
            }
        """)

        self.stop_btn = QPushButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        self.stop_btn.setStyleSheet("""
            QPushButton {
                background: #e53e3e;
                color: white;
                border: none;
                padding: 12px 30px;
                font-size: 16px;
                font-weight: bold;
                border-radius: 25px;
            }
            QPushButton:hover {
                background: #c53030;
            }
            QPushButton:disabled {
                background: #4a5568;
            }
        """)

        self.download_model_btn = QPushButton("üì• –°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å")
        self.download_model_btn.setStyleSheet("""
            QPushButton {
                background: #38a169;
                color: white;
                border: none;
                padding: 12px 30px;
                font-size: 16px;
                font-weight: bold;
                border-radius: 25px;
            }
            QPushButton:hover {
                background: #2f855a;
            }
            QPushButton:disabled {
                background: #4a5568;
            }
        """)

        control_layout.addWidget(self.transcribe_btn)
        control_layout.addWidget(self.stop_btn)
        control_layout.addWidget(self.download_model_btn)
        control_layout.addStretch()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #3c3c3c;
                border-radius: 10px;
                text-align: center;
                font-weight: bold;
                background-color: #2d2d2d;
                height: 25px;
            }
            QProgressBar::chunk {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #667eea, stop:1 #764ba2);
                border-radius: 8px;
            }
        """)
        self.progress_bar.hide()

        self.status_label = QLabel("")
        self.status_label.setStyleSheet("color: #8b949e; font-size: 12px;")
        self.status_label.hide()

        # Splitter –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        splitter = QSplitter(Qt.Orientation.Vertical)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_group = QGroupBox("üìÑ –†–ï–ó–£–õ–¨–¢–ê–¢")
        result_layout = QVBoxLayout()

        self.result_text = QTextEdit()
        self.result_text.setReadOnly(True)
        self.result_text.setPlaceholderText("–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...")

        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_layout = QHBoxLayout()
        self.save_txt_btn = self.create_save_button("üíæ TXT", "#48bb78")
        self.save_docx_btn = self.create_save_button("üìÑ DOCX", "#4299e1")
        self.save_json_btn = self.create_save_button("üìä JSON", "#ed8936")

        save_layout.addStretch()
        save_layout.addWidget(self.save_txt_btn)
        save_layout.addWidget(self.save_docx_btn)
        save_layout.addWidget(self.save_json_btn)

        result_layout.addWidget(self.result_text)
        result_layout.addLayout(save_layout)
        result_group.setLayout(result_layout)

        # –ñ–∏–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        live_group = QGroupBox("üî¥ –ñ–ò–í–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø")
        live_layout = QVBoxLayout()

        self.live_text = QTextEdit()
        self.live_text.setReadOnly(True)
        self.live_text.setMaximumHeight(150)
        self.live_text.setPlaceholderText("–°–µ–≥–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")

        live_layout.addWidget(self.live_text)
        live_group.setLayout(live_layout)

        splitter.addWidget(result_group)
        splitter.addWidget(live_group)
        splitter.setStretchFactor(0, 3)
        splitter.setStretchFactor(1, 1)

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        layout.addWidget(file_group)
        layout.addLayout(control_layout)
        layout.addWidget(self.progress_bar)
        layout.addWidget(self.status_label)
        layout.addWidget(splitter)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.select_file_btn.clicked.connect(self.select_file)
        self.transcribe_btn.clicked.connect(self.start_transcription)
        self.stop_btn.clicked.connect(self.stop_transcription)
        self.download_model_btn.clicked.connect(self.download_model)
        self.save_txt_btn.clicked.connect(lambda: self.save_results('txt'))
        self.save_docx_btn.clicked.connect(lambda: self.save_results('docx'))
        self.save_json_btn.clicked.connect(lambda: self.save_results('json'))

        return widget

    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        basic_group = QGroupBox("‚öôÔ∏è –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò")
        basic_layout = QVBoxLayout()

        # –Ø–∑—ã–∫
        lang_layout = QHBoxLayout()
        lang_layout.addWidget(QLabel("–Ø–∑—ã–∫:"))
        self.language_combo = QComboBox()
        self.language_combo.addItems(["ru - –†—É—Å—Å–∫–∏–π", "en - English", "auto - –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"])
        self.language_combo.setCurrentIndex(0)
        lang_layout.addWidget(self.language_combo)
        lang_layout.addStretch()

        # –ú–æ–¥–µ–ª—å
        model_layout = QHBoxLayout()
        model_layout.addWidget(QLabel("–ú–æ–¥–µ–ª—å:"))
        self.model_combo = QComboBox()
        models = [
            "tiny - –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ (39 MB)",
            "base - –ë—ã—Å—Ç—Ä–æ (74 MB)",
            "small - –ë–∞–ª–∞–Ω—Å (244 MB)",
            "medium - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ (769 MB)",
            "large-v3 - –ú–∞–∫—Å–∏–º—É–º (1.5 GB)"
        ]
        self.model_combo.addItems(models)
        self.model_combo.setCurrentIndex(2)  # small –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        model_layout.addWidget(self.model_combo)
        model_layout.addStretch()

        basic_layout.addLayout(lang_layout)
        basic_layout.addLayout(model_layout)
        basic_group.setLayout(basic_layout)

        # –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è
        diarization_group = QGroupBox("üë• –î–ò–ê–†–ò–ó–ê–¶–ò–Ø –°–ü–ò–ö–ï–†–û–í")
        diarization_layout = QVBoxLayout()

        self.diarization_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é —Å–ø–∏–∫–µ—Ä–æ–≤")
        self.diarization_checkbox.setChecked(True)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        info_label = QLabel("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Ä–µ—á—å —Ä–∞–∑–Ω—ã—Ö –≥–æ–≤–æ—Ä—è—â–∏—Ö")
        info_label.setStyleSheet("color: #56d364; font-size: 11px; margin: 5px 0px;")
        info_label.setWordWrap(True)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        params_layout = QHBoxLayout()

        params_layout.addWidget(QLabel("–ú–∏–Ω. –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ø–∏–∫–µ—Ä–∞–º–∏ (—Å–µ–∫):"))
        self.min_pause_spin = QSpinBox()
        self.min_pause_spin.setMinimum(1)
        self.min_pause_spin.setMaximum(10)
        self.min_pause_spin.setValue(2)
        self.min_pause_spin.setToolTip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å–ø–∏–∫–µ—Ä–∞")
        params_layout.addWidget(self.min_pause_spin)

        params_layout.addWidget(QLabel("–ú–∏–Ω. —Ç–∏—à–∏–Ω–∞ (–º—Å):"))
        self.min_silence_spin = QSpinBox()
        self.min_silence_spin.setMinimum(500)
        self.min_silence_spin.setMaximum(3000)
        self.min_silence_spin.setSingleStep(100)
        self.min_silence_spin.setValue(1000)
        self.min_silence_spin.setToolTip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∏—à–∏–Ω—ã –¥–ª—è VAD")
        params_layout.addWidget(self.min_silence_spin)

        params_layout.addStretch()

        diarization_layout.addWidget(self.diarization_checkbox)
        diarization_layout.addWidget(info_label)
        diarization_layout.addLayout(params_layout)
        diarization_group.setLayout(diarization_layout)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.diarization_checkbox.stateChanged.connect(self.on_diarization_changed)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_group = QGroupBox("üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        info_layout = QVBoxLayout()

        self.system_info = QTextEdit()
        self.system_info.setReadOnly(True)
        self.system_info.setMaximumHeight(150)
        self.update_system_info()

        info_layout.addWidget(self.system_info)
        info_group.setLayout(info_layout)

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        layout.addWidget(basic_group)
        layout.addWidget(diarization_group)
        layout.addWidget(info_group)
        layout.addStretch()

        return widget

    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –õ–æ–≥–∏
        self.log_widget = LogWidget()

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        controls_layout = QHBoxLayout()

        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.clicked.connect(self.log_widget.clear)

        export_btn = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.clicked.connect(self.export_logs)

        controls_layout.addStretch()
        controls_layout.addWidget(clear_btn)
        controls_layout.addWidget(export_btn)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
        stats_layout = QVBoxLayout()

        self.stats_text = QTextEdit()
        self.stats_text.setReadOnly(True)
        self.stats_text.setMaximumHeight(150)
        self.stats_text.setPlaceholderText("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")

        stats_layout.addWidget(self.stats_text)
        stats_group.setLayout(stats_layout)

        # –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
        layout.addWidget(self.log_widget)
        layout.addLayout(controls_layout)
        layout.addWidget(stats_group)

        return widget

    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        status_bar = self.statusBar()
        status_bar.setStyleSheet("""
            QStatusBar {
                background: #1e1e1e;
                color: #8b949e;
                border-top: 1px solid #3c3c3c;
            }
        """)

        self.memory_label = QLabel("üíæ –ü–∞–º—è—Ç—å: --")
        self.gpu_label = QLabel("GPU: --")
        self.time_label = QLabel("‚è±Ô∏è –í—Ä–µ–º—è: --")

        status_bar.addPermanentWidget(self.memory_label)
        status_bar.addPermanentWidget(self.gpu_label)
        status_bar.addPermanentWidget(self.time_label)

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.status_timer = QTimer()
        self.status_timer.timeout.connect(self.update_status)
        self.status_timer.start(1000)

    def create_save_button(self, text, color):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        btn = QPushButton(text)
        btn.setEnabled(False)
        btn.setStyleSheet(f"""
            QPushButton {{
                background: {color};
                color: white;
                border: none;
                padding: 8px 20px;
                font-weight: bold;
                border-radius: 20px;
            }}
            QPushButton:hover {{
                background: {color}dd;
            }}
            QPushButton:pressed {{
                background: {color}bb;
            }}
            QPushButton:disabled {{
                background: #4a5568;
                color: #718096;
            }}
        """)
        return btn

    def get_dark_theme(self):
        """–¢–µ–º–Ω–∞—è —Ç–µ–º–∞"""
        return """
            QMainWindow {
                background-color: #1e1e1e;
            }
            QWidget {
                background-color: #2d2d2d;
                color: #d4d4d4;
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 13px;
            }
            QGroupBox {
                border: 2px solid #3c3c3c;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                font-weight: bold;
                font-size: 14px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
                color: #58a6ff;
            }
            QPushButton {
                background-color: #3c3c3c;
                border: 1px solid #484848;
                padding: 6px 12px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #484848;
            }
            QPushButton:pressed {
                background-color: #2d2d2d;
            }
            QComboBox {
                background-color: #3c3c3c;
                border: 1px solid #484848;
                padding: 6px;
                border-radius: 6px;
            }
            QComboBox:drop-down {
                border: none;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #d4d4d4;
                margin-right: 5px;
            }
            QLineEdit {
                background-color: #3c3c3c;
                border: 1px solid #484848;
                padding: 6px;
                border-radius: 6px;
            }
            QTextEdit {
                background-color: #1e1e1e;
                border: 1px solid #3c3c3c;
                border-radius: 6px;
                padding: 8px;
            }
            QProgressBar {
                text-align: center;
            }
            QScrollBar:vertical {
                background: #2d2d2d;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #5a5a5a;
                border-radius: 6px;
                min-height: 20px;
            }
            QScrollBar::handle:vertical:hover {
                background: #7a7a7a;
            }
            QSpinBox {
                background-color: #3c3c3c;
                border: 1px solid #484848;
                padding: 4px;
                border-radius: 6px;
            }
            QCheckBox {
                spacing: 8px;
            }
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
                border-radius: 4px;
                border: 2px solid #484848;
                background-color: #2d2d2d;
            }
            QCheckBox::indicator:checked {
                background-color: #667eea;
                border-color: #667eea;
            }
            QMenuBar {
                background-color: #2d2d2d;
                color: #d4d4d4;
            }
            QMenuBar::item:selected {
                background-color: #667eea;
            }
            QMenu {
                background-color: #2d2d2d;
                border: 1px solid #3c3c3c;
                color: #d4d4d4;
            }
            QMenu::item:selected {
                background-color: #667eea;
            }
        """

    def on_diarization_changed(self, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        enabled = state == Qt.CheckState.Checked

        # –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.min_pause_spin.setEnabled(enabled)
        self.min_silence_spin.setEnabled(enabled)

        self.log_widget.log(f"–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è {'–≤–∫–ª—é—á–µ–Ω–∞' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}", "INFO")

    def update_system_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        info = []

        # Python
        info.append(f"Python: {sys.version.split()[0]}")

        # GPU
        if TORCH_AVAILABLE:
            if DEVICE == "cuda":
                try:
                    import torch
                    gpu_name = torch.cuda.get_device_name(0)
                    vram = torch.cuda.get_device_properties(0).total_memory / (1024 ** 3)
                    info.append(f"GPU: {gpu_name} ({vram:.1f} GB)")
                except:
                    info.append("GPU: –û–±–Ω–∞—Ä—É–∂–µ–Ω")
            else:
                info.append("–†–µ–∂–∏–º: CPU")
        else:
            info.append("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # FFmpeg
        ffmpeg_found = os.path.exists('ffmpeg.exe') or self.check_ffmpeg()
        info.append(f"FFmpeg: {'‚úÖ –ù–∞–π–¥–µ–Ω' if ffmpeg_found else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")

        # –ú–æ–¥–µ–ª–∏
        cache_dir = ModelDownloader.get_models_cache_dir()
        if cache_dir.exists():
            models = list(cache_dir.glob("*"))
            info.append(f"–ö—ç—à –º–æ–¥–µ–ª–µ–π: {len(models)} —Ñ–∞–π–ª–æ–≤")

        info.append("–ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∞—à–µ–π: –∞–∫—Ç–∏–≤–Ω–∞")

        self.system_info.setPlainText("\n".join(info))

    def check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg"""
        try:
            if getattr(sys, 'frozen', False):
                app_dir = Path(sys.executable).parent
            else:
                app_dir = Path(__file__).parent

            local_ffmpeg = app_dir / "ffmpeg.exe"
            if local_ffmpeg.exists():
                return True

            result = subprocess.run(['ffmpeg', '-version'], capture_output=True)
            return result.returncode == 0
        except:
            return False

    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        # –ü–∞–º—è—Ç—å
        try:
            import psutil
            memory = psutil.Process().memory_info().rss / (1024 ** 3)
            self.memory_label.setText(f"üíæ –ü–∞–º—è—Ç—å: {memory:.1f} GB")
        except:
            pass

        # GPU
        if DEVICE == "cuda" and TORCH_AVAILABLE:
            try:
                import torch
                allocated = torch.cuda.memory_allocated() / (1024 ** 3)
                reserved = torch.cuda.memory_reserved() / (1024 ** 3)
                self.gpu_label.setText(f"GPU: {allocated:.1f}/{reserved:.1f} GB")
            except:
                pass
        else:
            self.gpu_label.setText("CPU —Ä–µ–∂–∏–º")

        # –í—Ä–µ–º—è
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_label.setText(f"‚è±Ô∏è {current_time}")

    def select_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞"""
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            if self.transcription_thread and self.transcription_thread.isRunning():
                reply = QMessageBox.question(
                    self,
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª?",
                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
                )
                if reply == QMessageBox.StandardButton.Yes:
                    self.stop_transcription()
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if self.transcription_thread:
                        self.transcription_thread.wait(3000)  # –ñ–¥–µ–º –¥–æ 3 —Å–µ–∫—É–Ω–¥
                else:
                    return

            file_path, _ = QFileDialog.getOpenFileName(
                self,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª",
                "",
                "–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (*.mp4 *.mkv *.avi *.mov *.webm *.mp3 *.wav *.m4a *.aac *.flac *.ogg);;–í—Å–µ —Ñ–∞–π–ª—ã (*.*)"
            )

            if file_path:
                # –í–ê–ñ–ù–û: –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
                self.log_widget.log("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...", "INFO")
                CrashSafeMemoryManager.reset_for_new_transcription()

                self.video_file_path = file_path
                file_name = os.path.basename(file_path)
                file_size = os.path.getsize(file_path) / (1024 ** 2)

                self.file_label.setText(f"{file_name} ({file_size:.1f} MB)")
                self.file_label.setStyleSheet("color: #58a6ff; font-style: normal;")

                self.log_widget.log(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_name}", "SUCCESS")
                self.log_widget.log(f"–†–∞–∑–º–µ—Ä: {file_size:.1f} MB", "DEBUG")

                # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ UI
                self.result_text.clear()
                self.live_text.clear()
                self.stats_text.clear()
                self.transcribed_text = ""

                # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.progress_bar.hide()
                self.status_label.hide()

                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
                self.transcribe_btn.setEnabled(True)

                # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                for btn in [self.save_txt_btn, self.save_docx_btn, self.save_json_btn]:
                    btn.setEnabled(False)

                self.log_widget.log("–ì–æ—Ç–æ–≤ –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", "SUCCESS")

        except Exception as e:
            self.log_widget.log(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: {e}", "ERROR")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª: {e}")

    def download_model(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        model_name = self.model_combo.currentText().split(' - ')[0]

        reply = QMessageBox.question(
            self,
            "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏",
            f"–°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å {model_name}?\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.download_model_btn.setEnabled(False)
            self.progress_bar.show()
            self.progress_bar.setValue(0)
            self.status_label.show()

            self.model_downloader = ModelDownloader(model_name)
            self.model_downloader.progress_signal.connect(self.on_download_progress)
            self.model_downloader.finished_signal.connect(self.on_download_finished)
            self.model_downloader.log_signal.connect(self.log_widget.log)
            self.model_downloader.start()

    @Slot(int, str)
    def on_download_progress(self, value, message):
        """–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        self.progress_bar.setValue(value)
        self.status_label.setText(message)

    @Slot(bool, str)
    def on_download_finished(self, success, message):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        self.progress_bar.hide()
        self.status_label.hide()
        self.download_model_btn.setEnabled(True)

        if success:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            self.log_widget.log("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", "SUCCESS")
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å:\n{message}")

        self.model_downloader = None

    def start_transcription(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        if not self.video_file_path:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
        if not os.path.exists(self.video_file_path):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        try:
            file_size = os.path.getsize(self.video_file_path)
            if file_size == 0:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç")
                return
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}")
            return

        # UI
        self.transcribe_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.download_model_btn.setEnabled(False)
        self.progress_bar.show()
        self.progress_bar.setValue(0)
        self.status_label.show()
        self.live_text.clear()
        self.result_text.clear()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        lang = self.language_combo.currentText().split(' - ')[0]
        model = self.model_combo.currentText().split(' - ')[0]

        settings = {
            'language': lang,
            'model_size': model,
            'use_diarization': self.diarization_checkbox.isChecked(),
            'min_pause': float(self.min_pause_spin.value()),
            'min_silence': int(self.min_silence_spin.value())
        }

        self.log_widget.log("=" * 50, "INFO")
        self.log_widget.log("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", "INFO")
        self.log_widget.log(f"–§–∞–π–ª: {os.path.basename(self.video_file_path)}", "INFO")
        self.log_widget.log(f"–†–∞–∑–º–µ—Ä: {file_size / (1024**2):.1f} MB", "INFO")
        self.log_widget.log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: {json.dumps(settings, ensure_ascii=False)}", "DEBUG")

        # –ú—è–≥–∫–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        try:
            gc.collect()
        except:
            pass

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        try:
            self.transcription_thread = ProfessionalTranscriptionWorker(self.video_file_path, settings)
            self.transcription_thread.progress_signal.connect(self.on_progress)
            self.transcription_thread.log_signal.connect(self.log_widget.log)
            self.transcription_thread.finished_signal.connect(self.on_finished)
            self.transcription_thread.segment_signal.connect(self.on_segment)
            self.transcription_thread.stats_signal.connect(self.on_stats)
            self.transcription_thread.start()

            self.log_widget.log("–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω", "SUCCESS")

        except Exception as thread_error:
            self.log_widget.log(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞: {thread_error}", "ERROR")
            self.on_finished(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {thread_error}")

    def stop_transcription(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        if self.transcription_thread and self.transcription_thread.isRunning():
            self.log_widget.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...", "WARNING")

            try:
                self.transcription_thread.stop()

                # –ñ–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if not self.transcription_thread.wait(5000):  # 5 —Å–µ–∫—É–Ω–¥
                    self.log_widget.log("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞...", "WARNING")
                    self.transcription_thread.terminate()
                    self.transcription_thread.wait(2000)  # –ï—â–µ 2 —Å–µ–∫—É–Ω–¥—ã

                self.log_widget.log("–ü–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "INFO")

            except Exception as e:
                self.log_widget.log(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞: {e}", "ERROR")
            finally:
                # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                self.on_finished("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    @Slot(int, str)
    def on_progress(self, value, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_bar.setValue(value)
        self.status_label.setText(message)

    @Slot(str)
    def on_segment(self, segment):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.live_text.append(segment)

        # –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
        cursor = self.live_text.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.live_text.setTextCursor(cursor)

    @Slot(dict)
    def on_stats(self, stats):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        text = f"""
–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò:
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['duration']:.1f} —Å–µ–∫
üìù –°–µ–≥–º–µ–Ω—Ç–æ–≤: {stats['segments']}
üí¨ –°–ª–æ–≤: {stats['words']}
üìÑ –°–∏–º–≤–æ–ª–æ–≤: {stats['chars']}
‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {stats['speed']:.1f} —Å–µ–≥–º/—Å–µ–∫
"""
        self.stats_text.setPlainText(text.strip())

    @Slot(str)
    def on_finished(self, result):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"""
        try:
            self.progress_bar.hide()
            self.status_label.hide()
            self.transcribe_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.download_model_btn.setEnabled(True)

            if result.startswith("–û—à–∏–±–∫–∞"):
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", result)
                self.log_widget.log(result, "ERROR")
            else:
                self.transcribed_text = result
                self.result_text.setPlainText(result)

                # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                for btn in [self.save_txt_btn, self.save_docx_btn, self.save_json_btn]:
                    btn.setEnabled(True)

                # –°–∫—Ä–æ–ª–ª –∫ –Ω–∞—á–∞–ª—É
                cursor = self.result_text.textCursor()
                cursor.setPosition(0)
                self.result_text.setTextCursor(cursor)

                self.log_widget.log("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
                self.log_widget.log("=" * 50, "INFO")

            # –í–ê–ñ–ù–û: –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if self.transcription_thread:
                try:
                    if self.transcription_thread.isRunning():
                        self.transcription_thread.wait(1000)  # –ñ–¥–µ–º –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã
                except:
                    pass
                finally:
                    self.transcription_thread = None

            # –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            try:
                gc.collect()
                time.sleep(0.1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
            except:
                pass

            self.log_widget.log("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏", "INFO")

        except Exception as e:
            self.log_widget.log(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}", "ERROR")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.transcription_thread = None

    def save_results(self, format_type):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.transcribed_text:
            return

        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        base_name = Path(self.video_file_path).stem

        if format_type == 'txt':
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç",
                f"{base_name}_{timestamp}.txt",
                "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)"
            )
            if file_path:
                try:
                    with open(file_path, 'w', encoding='utf-8') as f:
                        f.write(f"–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø\n")
                        f.write(f"–§–∞–π–ª: {os.path.basename(self.video_file_path)}\n")
                        f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                        f.write(f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {APP_NAME} v{APP_VERSION}\n")
                        f.write(f"–ê–≤—Ç–æ—Ä: {AUTHOR}\n")
                        f.write("=" * 50 + "\n\n")
                        f.write(self.transcribed_text)

                    self.log_widget.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}", "SUCCESS")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                except Exception as e:
                    self.log_widget.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", "ERROR")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

        elif format_type == 'docx':
            if not DOCX_AVAILABLE:
                QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx")
                return

            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ Word",
                f"{base_name}_{timestamp}.docx",
                "–î–æ–∫—É–º–µ–Ω—Ç—ã Word (*.docx)"
            )
            if file_path:
                try:
                    doc = Document()
                    doc.add_heading('–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–Ø', 0)

                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    doc.add_paragraph(f'–§–∞–π–ª: {os.path.basename(self.video_file_path)}')
                    doc.add_paragraph(f'–î–∞—Ç–∞: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
                    doc.add_paragraph(f'–ü—Ä–æ–≥—Ä–∞–º–º–∞: {APP_NAME} v{APP_VERSION}')
                    doc.add_paragraph(f'–ê–≤—Ç–æ—Ä: {AUTHOR}')
                    doc.add_paragraph(f'–ú–æ–¥–µ–ª—å: {self.model_combo.currentText()}')
                    doc.add_paragraph(f'–Ø–∑—ã–∫: {self.language_combo.currentText()}')

                    doc.add_heading('–†–µ–∑—É–ª—å—Ç–∞—Ç', level=1)

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏–∫–µ—Ä–æ–≤
                    if "–°–ø–∏–∫–µ—Ä" in self.transcribed_text:
                        for para in self.transcribed_text.split('\n\n'):
                            if para.strip():
                                p = doc.add_paragraph()
                                if para.startswith("–°–ø–∏–∫–µ—Ä"):
                                    parts = para.split(":", 1)
                                    if len(parts) == 2:
                                        p.add_run(parts[0] + ":").bold = True
                                        p.add_run(" " + parts[1])
                                else:
                                    p.add_run(para)
                    else:
                        doc.add_paragraph(self.transcribed_text)

                    doc.save(file_path)
                    self.log_widget.log(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}", "SUCCESS")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                except Exception as e:
                    self.log_widget.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", "ERROR")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

        elif format_type == 'json':
            file_path, _ = QFileDialog.getSaveFileName(
                self,
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ JSON",
                f"{base_name}_{timestamp}.json",
                "JSON —Ñ–∞–π–ª—ã (*.json)"
            )
            if file_path:
                try:
                    data = {
                        'metadata': {
                            'file': os.path.basename(self.video_file_path),
                            'date': datetime.now().isoformat(),
                            'program': f"{APP_NAME} v{APP_VERSION}",
                            'author': AUTHOR,
                            'model': self.model_combo.currentText(),
                            'language': self.language_combo.currentText(),
                            'professional_edition': True
                        },
                        'text': self.transcribed_text,
                        'statistics': self.stats_text.toPlainText() if self.stats_text.toPlainText() else None
                    }

                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)

                    self.log_widget.log(f"JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}", "SUCCESS")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "JSON —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                except Exception as e:
                    self.log_widget.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}", "ERROR")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤",
            f"professional_logs_{timestamp}.txt",
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt)"
        )

        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(f"–õ–û–ì–ò {APP_NAME} v{APP_VERSION}\n")
                    f.write(f"–ê–≤—Ç–æ—Ä: {AUTHOR}\n")
                    f.write(f"–≠–∫—Å–ø–æ—Ä—Ç: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write("=" * 60 + "\n\n")
                    f.write(self.log_widget.toPlainText())
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")

    def closeEvent(self, event):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        active_threads = []

        if self.transcription_thread and self.transcription_thread.isRunning():
            active_threads.append("—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è")

        if self.model_downloader and self.model_downloader.isRunning():
            active_threads.append("—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")

        if active_threads:
            reply = QMessageBox.question(
                self,
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                f'–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {", ".join(active_threads)}.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?',
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                QMessageBox.StandardButton.No
            )

            if reply == QMessageBox.StandardButton.Yes:
                self.log_widget.log("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...", "WARNING")

                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –±–µ–∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
                try:
                    if self.transcription_thread:
                        self.transcription_thread.stop()
                    if self.model_downloader:
                        self.model_downloader.stop()
                except:
                    pass

                event.accept()
            else:
                event.ignore()
        else:
            # –û–±—ã—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ GPU
            event.accept()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        app = QApplication(sys.argv)
        app.setStyle(QStyleFactory.create("Fusion"))
        app.setApplicationName(APP_NAME)
        app.setApplicationVersion(APP_VERSION)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not FASTER_WHISPER_AVAILABLE:
            QMessageBox.critical(
                None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                "faster-whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π:\n"
                "pip install faster-whisper"
            )
            sys.exit(1)

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
        app.aboutToQuit.connect(lambda: None)  # –£–±–∏—Ä–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

        window = MainWindow()

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é
        menubar = window.menuBar()
        help_menu = menubar.addMenu("–ü–æ–º–æ—â—å")
        about_action = help_menu.addAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_action.triggered.connect(lambda: AboutDialog(window).exec())

        window.show()

        window.log_widget.log("=" * 50, "INFO")
        window.log_widget.log(f"{APP_NAME} v{APP_VERSION} –∑–∞–ø—É—â–µ–Ω", "SUCCESS")
        window.log_widget.log(f"–ê–≤—Ç–æ—Ä: {AUTHOR}", "INFO")
        window.log_widget.log("–ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∞—à–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", "INFO")
        window.log_widget.log("=" * 50, "INFO")

        sys.exit(app.exec())

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        try:
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É:\n{e}")
        except:
            pass


if __name__ == "__main__":
    main()
